
#ifndef TOKEN
#define TOKEN(n)
#endif

#ifndef TOKEN_BINARY_OP
#define TOKEN_BINARY_OP TOKEN
#endif

#ifndef TOKEN_UNARY_OP
#define TOKEN_UNARY_OP TOKEN
#endif

#ifndef TOKEN_KEYWORD
#define TOKEN_KEYWORD TOKEN
#endif

TOKEN_BINARY_OP(Add)
TOKEN_BINARY_OP(Sub)
TOKEN_BINARY_OP(Mul)
TOKEN_BINARY_OP(Div)
TOKEN_BINARY_OP(Mod)
TOKEN_BINARY_OP(Shl)
TOKEN_BINARY_OP(Shr)
TOKEN_BINARY_OP(Or)
TOKEN_BINARY_OP(And)
TOKEN_BINARY_OP(Xor)
TOKEN_BINARY_OP(LOr)
TOKEN_BINARY_OP(LAnd)
TOKEN_BINARY_OP(Assign)
TOKEN_BINARY_OP(AddA)
TOKEN_BINARY_OP(SubA)
TOKEN_BINARY_OP(MulA)
TOKEN_BINARY_OP(DivA)
TOKEN_BINARY_OP(ModA)
TOKEN_BINARY_OP(ShlA)
TOKEN_BINARY_OP(ShrA)
TOKEN_BINARY_OP(OrA)
TOKEN_BINARY_OP(AndA)
TOKEN_BINARY_OP(XorA)
TOKEN_BINARY_OP(Lt)
TOKEN_BINARY_OP(Gt)
TOKEN_BINARY_OP(Le)
TOKEN_BINARY_OP(Ge)
TOKEN_BINARY_OP(Eq)
TOKEN_BINARY_OP(Neq)

TOKEN_UNARY_OP(UAdd)
TOKEN_UNARY_OP(USub)
TOKEN_UNARY_OP(Not)
TOKEN_UNARY_OP(LNot)
TOKEN_UNARY_OP(Pointer)
TOKEN_UNARY_OP(Ref)

TOKEN_KEYWORD(Const)
TOKEN_KEYWORD(Do)
TOKEN_KEYWORD(Else)
TOKEN_KEYWORD(Enum)
TOKEN_KEYWORD(False)
TOKEN_KEYWORD(Fn)
TOKEN_KEYWORD(For)
TOKEN_KEYWORD(If)
TOKEN_KEYWORD(Return)
TOKEN_KEYWORD(Struct)
TOKEN_KEYWORD(True)
TOKEN_KEYWORD(Val)
TOKEN_KEYWORD(Var)
TOKEN_KEYWORD(When)
TOKEN_KEYWORD(While)

TOKEN(Eof)
TOKEN(Newline)
TOKEN(Identifier)
TOKEN(Number)
TOKEN(String)
TOKEN(Comment)
TOKEN(MLComment)
TOKEN(LPar)
TOKEN(RPar)
TOKEN(LBracket)
TOKEN(RBracket)
TOKEN(LBrace)
TOKEN(RBrace)
TOKEN(Colon)
TOKEN(Semicolon)
TOKEN(Comma)
TOKEN(Period)
TOKEN(Arrow)

#undef TOKEN
#undef TOKEN_BINARY_OP
#undef TOKEN_UNARY_OP
#undef TOKEN_KEYWORD
